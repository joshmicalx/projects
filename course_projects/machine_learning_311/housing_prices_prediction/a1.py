import numpy as np
import numpy.random as rnd
from matplotlib import pyplot as plt

# Read the data
# Download "data.csv" from the course website
data = np.genfromtxt('data.csv', delimiter=',', skip_header=1)

print(data.shape)

print('\n\nQuestion 1')
print('----------')

print('\nQuestion 1(a):')

print(data[:10, 0])
data1= data
print('\nQuestion 1(b):')

print(data[:10, 1])

print('\nQuestion 1(d):')

data = data[:, 1:]
print(data.shape)

test = data[data[:, 0] > 2013.417]

print('\nQuestion 1(f):')

train_valid = data[data[:, 0] <= 2013.417]

print(test.shape)
print(train_valid.shape)

print('\nQuestion 1(g):')

# Below array was generated by calling
# randarray = rnd.randint(0, 5, train_valid.shape[0])
# Do NOT uncomment the above line of code. Instead, we are including
# the values you should use below.
randarray = np.array([2, 0, 1, 3, 0, 0, 0, 3, 2, 3, 1, 1, 2, 0, 4, 4, 0, 2, 1, 2, 2, 2,
                      4, 1, 3, 2, 0, 1, 2, 0, 3, 0, 3, 1, 3, 0, 4, 1, 4, 4, 0, 0, 1, 2,
                      4, 0, 0, 1, 1, 1, 2, 3, 4, 4, 3, 3, 0, 0, 0, 0, 2, 2, 3, 0, 0, 1,
                      4, 1, 4, 2, 2, 4, 4, 2, 0, 4, 0, 3, 2, 0, 4, 3, 1, 1, 0, 0, 0, 0,
                      1, 1, 4, 0, 3, 4, 2, 0, 0, 4, 4, 4, 4, 3, 3, 0, 0, 2, 2, 1, 3, 2,
                      4, 1, 2, 2, 3, 4, 1, 4, 3, 1, 1, 3, 0, 4, 4, 4, 0, 3, 3, 0, 4, 0,
                      0, 4, 3, 4, 1, 2, 2, 4, 4, 1, 2, 1, 1, 0, 4, 4, 4, 2, 0, 4, 2, 0,
                      4, 4, 1, 4, 0, 4, 0, 0, 1, 4, 3, 2, 4, 3, 1, 4, 1, 3, 4, 1, 0, 0,
                      4, 4, 2, 0, 4, 4, 4, 2, 3, 3, 4, 1, 0, 1, 2, 3, 1, 0, 1, 3, 4, 0,
                      0, 1, 2, 2, 2, 2, 4, 3, 1, 1, 4, 4, 1, 4, 2, 4, 0, 2, 4, 1, 3, 0,
                      4, 2, 3, 0, 4, 2, 3, 2, 2, 0, 2, 0, 2, 3, 2, 3, 4, 2, 4, 2, 2, 4,
                      3, 4, 0, 4, 4, 0, 1, 4, 2, 4, 2, 4, 0, 3, 4, 2, 1, 1, 3, 0, 1, 0,
                      3, 1, 3, 2, 4, 3, 1, 3, 0, 3, 0, 4, 2, 1, 2, 3, 2, 2, 4, 1, 4, 2,
                      1, 3, 1, 2, 2, 3, 1, 4, 2, 2, 4, 4, 1, 3, 2, 4, 1, 2, 4, 4, 0, 3,
                      1, 2, 1, 3, 3, 3, 2, 1, 3, 0, 2, 4, 2, 0, 3, 1, 0, 4, 2, 4, 1, 0,
                      4, 2, 2, 0, 1, 4, 3, 4, 0, 3, 2, 0, 2, 0])

train = train_valid[randarray != 0]
valid = train_valid[randarray == 0]

print(train.shape)
print(valid.shape)

print('\nQuestion 1(h):')

train_x = train[:, 1:6]
train_t = train[:, 6]
valid_x = valid[:, 1:6]
valid_t = valid[:, 6]
test_x = test[:, 1:6]
test_t = test[:, 6]

print(train_x[:2])
print(train_t[:2])
print(valid_x[:2])
print(valid_t[:2])
print(test_x[:2])
print(test_t[:2])

print('\nQuestion 1(i):')

x_mean = np.mean(train_x, axis=0, dtype=np.float64)
x_std = np.std(train_x, axis=0, dtype=np.float64)

print(np.mean(data, axis=0, dtype=np.float64))
print(np.std(data, axis=0, dtype=np.float64))
print(x_mean)
print(x_std)

print('\nQuestion 1(l):')

tmp_a = np.array([[1.4, 2.5, 3.0], [9.1, 3.4, 2.3]])
tmp_b = np.sum(tmp_a, axis=0)
print(tmp_a)
print(tmp_b)
print(tmp_a - tmp_b)

print('\nQuestion 1(m):')

norm_train_x = (train_x - x_mean) / x_std

print(norm_train_x.mean(axis=0))
print(norm_train_x[:2,:])


print('\nQuestion 1(n):')
import time
nonvec_before = time.time()

norm_train_x_loop = np.zeros_like(train_x)
for i in range(train_x.shape[0]):
    for j in range(train_x.shape[1]):
        norm_train_x_loop = (train_x[i, j] - x_mean[j]) / x_std[j]

nonvec_after = time.time()
print("Non-vectorized time: ", nonvec_after - nonvec_before)


vec_before = time.time()
norm_train_x = (train_x - train_x.mean(axis=0)) / train_x.std(axis=0)
vec_after = time.time()
print("Vectorized time: ", vec_after - vec_before)

# Please leave these print statements, to help your TAs grade quickly.
print('\n\nQuestion 2')
print('----------')
print('\nQuestion 2(a):')

v = valid_x[0] # should be np.array([ 19.5    , 306.5947 ,   9.     ,  24.98034, 121.53951])
distances = ((train_x - v)**2).dot(np.ones(v.shape)) # Euclidean distance without sqrt
n = distances.argmin()

print(distances[:10])
print(train_x[n])
print(train_t[n])

print('\nQuestion 2(b):')

n3 = np.take(train_t, distances.argsort()[:3])

print(n3.mean())

print('\nQuestion 2(c):')

def unnorm_knn(v, k, features=train_x, labels=train_t):
    """
    Returns the k Nearest Neighbour prediction of housing prices for an input
    vector v.

    Parameters:
        v - The input vector to make predictions for
        k - The hyperparameter "k" in kNN
        features - The input features of the training data; a numpy array of shape [N, D]
                   (By default, `train_x` is used)
        labels - The target labels of the training data; a numpy array of shape [N]
                 (By default, `train_t` is used)
    """
    distances = ((features - v)**2).dot(np.ones(v.shape))
    preds = np.take(labels, distances.argsort()[:k])
    
    return np.mean(preds)

print(unnorm_knn(v=valid_x[1], k=5))

print('\nQuestion 2(d):')
def compute_mse(predict, data_x=valid_x, data_t=valid_t):
    """
    Returns the Mean Squared Error of a model across a dataset

    Parameters:
        predict - A Python *function* that takes an input vector and produces a
                  prediction for that vector.
        data_x - The input features of the data set to make predictions for
                 (By default, `valid_x` is used)
        data_t - The target labels of the dataset to make predictions for 
                 (By default, `train_t` is used)
    """

    errors = []
    for i in range(data_t.shape[0]):
        y = predict(data_x[i])
        error = 0.5*((y - data_t[i])**2)
        errors.append(error) 

    return np.mean(errors)

def baseline(v):
    """
    Returns the average housing price given an input vector v.
    """
    return np.mean(train_t)

# compute and print the training and validation MSE
print(compute_mse(baseline, data_x=train_x, data_t=train_t))
print(compute_mse(baseline, data_x=valid_x, data_t=valid_t))

print('\nQuestion 2(e):')

train_mse = []
valid_mse = []
for k in range(1, 31):
    # create a temporary function `predict_fn` that computes the knn
    # prediction for the current value of the loop variable `k`
    def predict_fn(new_v):
        return unnorm_knn(new_v, k)

    # compute the training and validation MSE for this kNN model
    mse = compute_mse(predict_fn, data_x=train_x, data_t=train_t)
    train_mse.append(mse)
    mse = compute_mse(predict_fn, data_x=valid_x, data_t=valid_t)
    valid_mse.append(mse)
    
print(train_mse)
print(valid_mse)

plt.plot(range(1, 31), train_mse)
plt.plot(range(1, 31), valid_mse)
plt.xlabel("k")
plt.ylabel("MSE")
plt.title("Unnormalized kNN")
plt.legend(["Training", "Validation"])
plt.show()


print('\nQuestion 2(f):')

def norm_knn(v, k, features=norm_train_x, means=x_mean, stds=x_std, labels=train_t):
    """
    Returns the k Nearest Neighbour prediction of housing prices for an input
    vector v.

    Parameters:
        v - The input vector to make predictions for
        k - The hyperparameter "k" in kNN
        features - The normalized input features of the training data
                   (By default, `norm_train_x` is used)
        means - The means over the training data (By default, `x_mean` is used)
        stds - The standard deviations of the training data (By default, `x_std` is used)
        labels - The target labels of the training data; a numpy array of shape [N]
                 (By default, `train_t` is used)
    """
    norm_v = (v - means) / stds
    distances = ((features - norm_v)**2).dot(np.ones(norm_v.shape))
    preds = np.take(labels, distances.argsort()[:k])
    
    return np.mean(preds)

train_mse = []
valid_mse = []
for k in range(1, 31):
    # create a temporary function `predict_fn` that computes the knn
    # prediction for the current value of the loop variable `k`
    def predict_fn(new_v):
        return norm_knn(new_v, k)

    # compute the training and validation MSE for this kNN model
    mse = compute_mse(predict_fn, data_x=train_x, data_t=train_t)
    train_mse.append(mse)
    mse = compute_mse(predict_fn, data_x=valid_x, data_t=valid_t)
    valid_mse.append(mse)

print(train_mse)
print(valid_mse)

plt.plot(range(1, 31), train_mse)
plt.plot(range(1, 31), valid_mse)
plt.xlabel("k")
plt.ylabel("MSE")
plt.title("Normalized kNN")
plt.legend(["Training", "Validation"])
plt.show()

print('\n\nQuestion 3')
print('----------')

train_d = train_x[:, 0] # house age

# Plot this feature against the target (house price)
plt.scatter(train_d, train_t)
plt.xlabel("House Age")
plt.ylabel("House Price")
plt.title("House Age vs. Price")
plt.show()

print('\nQuestion 3(a):')

dmatrix = np.stack((np.ones_like(train_d), train_d)).T
linear_coef = np.linalg.inv(dmatrix.T @ dmatrix) @ dmatrix.T @ train_t
print(linear_coef)

def pred_linear(v, coef=linear_coef):
    """
    Returns the linear regression predictions of house prices, given
    a vector consisting of the ages of several houses that we would
    like to make predictions for.

    Parameters:
        v - A vector of house ages
        coef - The linear regression coefficient
    """
    X = np.stack((np.ones((v.shape[0])), v)).T
    return X @ coef.T

def plot_prediction(predict, title):
    """
    Display a plot that superimposes the model predictions on a scatter
    plot of the training data (train_d, train_t)

    Parameters:
        predict - A Python *function* that takes an input vector and produces a
                  prediction for that vector.
        title - A title to display on the figure.
    """
    # start with a scatter plot
    plt.scatter(train_d, train_t)

    # create several "house age" values to make predictions for
    min_age = np.min(train_d)
    max_age = np.max(train_d)
    v = np.arange(min_age, max_age, 0.1)
    
    # make predictions for those values
    y = predict(v)

    # plot the result
    plt.plot(v, y)
    plt.title(title)
    plt.xlabel("House Age")
    plt.ylabel("House Price")
    plt.show()

plot_prediction(pred_linear, title="Linear Regression (no feature expansion)")

print('\nQuestion 3(c):')

def compute_mse_vectorized(predict, data_x=valid_x, data_t=valid_t):
    """
    Returns the Mean Squared Error of a model across a dataset

    Parameters:
        predict - A Python *function* that takes a vector of house ages, 
                  and produces a vector of house price predictions
        data_x - The input features of the data set to make predictions for
                 (By default, `valid_x` is used)
        data_t - The target labels of the dataset to make predictions for 
                 (By default, `train_t` is used)
    """
    v = data_x[:, 0] # house age
    errors = 0.5 * ((predict(v) - data_t) ** 2)
    return np.mean(errors)

print('\nQuestion 3(d):')

q_dmatrix = np.append(dmatrix, train_d.reshape(train_d.shape[0], 1) ** 2, axis=1)
quad_coef = np.linalg.inv(q_dmatrix.T @ q_dmatrix) @ q_dmatrix.T @ train_t

print(quad_coef)

def pred_quad(v, coef=quad_coef):
    """
    Returns the degree 2 polynomial regression predictions of
    house prices, given a vector consisting of the ages of several houses
    that we would like to make predictions for.

    Parameters:
        v - A vector of house ages
        coef - The linear regression coefficient
    """
    v = v.reshape(v.shape[0], 1)
    x = np.append(np.ones_like(v), v, axis=1)
    X = np.append(x, v**2, axis=1)
    return X @ coef.reshape(3,1)

plot_prediction(pred_quad, title="Polynomial Regression (M=2)")

print('\nQuestion 3(f):')
train_mse_lr = compute_mse_vectorized(pred_quad, data_x=train_x, data_t=train_t)
valid_mse_lr = compute_mse_vectorized(pred_quad, data_x=valid_x, data_t=valid_t)

print(train_mse_lr)
print(valid_mse_lr)


print('\nQuestion 3(g):')

train_mse_r = []
valid_mse_r = []

train_fmap = np.tile(train_d.reshape(train_d.shape[0],1), 10)
train_fmap = np.append(np.ones((train_fmap.shape[0],1)), train_fmap, axis=1)

def feature_mapping(v, M):
    fmap = np.ones((v.shape[0],1))
    fmap = np.append(fmap, np.tile(v.reshape(v.shape[0],1), M), axis=1)
    for m in range(0, M):
        fmap[:, m+1] = np.power(fmap[:, m+1], m+1)
    return fmap

norm_valid_x = (valid_x - train_d.mean())/train_d.std()

for M in range(0, 11):
    train_fmap[:, M] = np.power(train_fmap[:, M], M) 
    X = train_fmap[:, :M+1]
    if M == 0:
        ls_coef = np.array([np.mean(train_t)])
    else:
        ls_coef = np.linalg.inv(X.T @ X) @ X.T @ train_t

    def pred_poly(v, coef=ls_coef):
        return feature_mapping(v, M) @ coef.reshape(coef.shape[0],1)
    
    mse = compute_mse_vectorized(pred_poly, data_x=train_x, data_t=train_t)
    train_mse_r.append(mse)
 
    mse = compute_mse_vectorized(pred_poly, data_x=valid_x, data_t=valid_t)
    valid_mse_r.append(mse)

print(train_mse_r)
print(valid_mse_r)

plt.plot(range(0, 11), train_mse_r)
plt.plot(range(0, 11), valid_mse_r)
plt.xlabel("Polynomial Degree")
plt.ylabel("MSE")
plt.title("Polynomial Regression")
plt.legend(["Training", "Validation"])
plt.show()

for M in range(3, 11):
    X = train_fmap[:, :M+1]
    ls_coef = np.linalg.inv(X.T @ X) @ X.T @ train_t
    
    def pred_poly(v, coef=ls_coef):
        return feature_mapping(v, M) @ coef.reshape(coef.shape[0],1)
    
    plot_prediction(pred_poly, title="Polynomial Regression (M=%d)" % M)

print('\n\nQuestion 4')
print('----------')
print('\nQuestion 4(e):')

def pred_poly(weight, X):
    return X @ weight
    
def grad(weight, X, t):
    '''
    Return gradient of each weight evaluated at the current value

    Parameters:
        `weight` - a current "guess" of what our weights should be,
                   a numpy array of shape (D)
        `X` - matrix of shape (N,D) of input features
        `t` - target y values of shape (N)

    '''
    y = pred_poly(weight, X)
    N = X.shape[0]
    return (1/N) * (y - t).T @ X

print(grad(np.array([1]), np.array([[1], [1]]), np.array([2, 2])))

print('\nQuestion 4(g):')

def solve_via_gradient_descent(M, alpha=0.0025, niter=10000):
    '''
    Given `M` - maximum degree of the polynomial regression model
          `alpha` - the learning rate
          `niter` - the number of iterations of gradient descent to run
    Solves for linear regression weights.
    Return weights after `niter` iterations.
    '''
    # initialize all the weights to zeros
    w = np.zeros([M + 1])

    # construct the design matrix
    for i in range(niter):
        X = feature_mapping(train_d, M)
        w = w - alpha * grad(w, X, train_t)
    return w

print(solve_via_gradient_descent(M=1, alpha=0.0025, niter=10000))


print('\nQuestion 4(i):')
print(solve_via_gradient_descent(M=1, alpha=0.01, niter=50))

print('\n\nQuestion 5')
print('----------')

cv_valid_mse = []
for k in range (1, 31):
    mse = 0
    for f in range (5):        
        cv_valid = train_valid[randarray == f]
        cv_valid_x = cv_valid[:, 1:6]
        cv_valid_t = cv_valid[:, 6]
        
        cv_train = train_valid[randarray != f]
        cv_train_x = cv_train[:, 1:6]
        cv_train_t = cv_train[:, 6]
        
        def predict_fn(v):
            return unnorm_knn(v, k, features=cv_train_x, labels=cv_train_t)

        mse += compute_mse(predict_fn, data_x=cv_valid_x, data_t=cv_valid_t)
            
    cv_valid_mse.append(mse/5)
    
plt.plot(range(1, 31), cv_valid_mse)
plt.xlabel("k")
plt.ylabel("Average Validation MSE")
plt.title("5-Fold Cross Validation on Unnormalized kNN")
plt.legend(["Validation"])
plt.show()

print('\nQuestion 5(e):')

def norm_9nn(v):
    return norm_knn(v, 9)

test_mse = compute_mse(norm_9nn, data_x=test_x, data_t=test_t)
print(test_mse)











